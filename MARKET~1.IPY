{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7b1e856d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing the data set\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import seaborn as sns\n",
    "# graph to show in jupyter notebook\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62b18f28",
   "metadata": {},
   "source": [
    "### importing the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fa56b34",
   "metadata": {},
   "outputs": [],
   "source": [
    "customer = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\CUSTOMERS.csv\")\n",
    "geo_location = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\GEO_LOCATION.csv\")\n",
    "order_items = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\ORDER_ITEMS.csv\")\n",
    "order_payment = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\ORDER_PAYMENTS.csv\")\n",
    "order_review_rating = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\ORDER_REVIEW_RATINGS.csv\")\n",
    "orders = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\ORDERS.csv\")\n",
    "products = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\PRODUCTS.csv\")\n",
    "sellers = pd.read_csv(r\"C:\\Users\\MAGICPIN\\Desktop\\p\\assign\\Python Foundation End to End Case Study E-Commerce Analytics Project\\SELLERS.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "766c07b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# joinng the tables \n",
    "data = pd.merge(left =order_payment , right = orders,how = 'inner', on = \"order_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3fc71438",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(order_review_rating,data, how = 'inner', on = 'order_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "88d31ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(right = order_items , left = data , how = 'left', on = 'order_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9d856cb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.merge(right=sellers,left= data,how= 'left', on='seller_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26a1910a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(right = products, left = data, how = 'left', on = 'product_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae371342",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(right = customer , left = data, how = 'left', on = 'customer_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d64569a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(right = geo_location , left = data, how = 'left', left_on = 'customer_zip_code_prefix', right_on ='geolocation_zip_code_prefix' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "83626441",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>review_score</th>\n",
       "      <th>review_creation_date</th>\n",
       "      <th>review_answer_timestamp</th>\n",
       "      <th>payment_sequential</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>payment_installments</th>\n",
       "      <th>payment_value</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>...</th>\n",
       "      <th>product_width_cm</th>\n",
       "      <th>customer_unique_id</th>\n",
       "      <th>customer_zip_code_prefix</th>\n",
       "      <th>customer_city</th>\n",
       "      <th>customer_state</th>\n",
       "      <th>geolocation_zip_code_prefix</th>\n",
       "      <th>geolocation_lat</th>\n",
       "      <th>geolocation_lng</th>\n",
       "      <th>geolocation_city</th>\n",
       "      <th>geolocation_state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
       "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
       "      <td>4</td>\n",
       "      <td>1/18/2018 0:00</td>\n",
       "      <td>1/18/2018 21:46</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>8</td>\n",
       "      <td>397.26</td>\n",
       "      <td>41dcb106f807e993532d446263290104</td>\n",
       "      <td>...</td>\n",
       "      <td>35.0</td>\n",
       "      <td>68a5590b9926689be4e10f4ae2db21a8</td>\n",
       "      <td>6030</td>\n",
       "      <td>Nagari</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>6030.0</td>\n",
       "      <td>-23.561963</td>\n",
       "      <td>-46.765487</td>\n",
       "      <td>Nagari</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
       "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
       "      <td>4</td>\n",
       "      <td>1/18/2018 0:00</td>\n",
       "      <td>1/18/2018 21:46</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>8</td>\n",
       "      <td>397.26</td>\n",
       "      <td>41dcb106f807e993532d446263290104</td>\n",
       "      <td>...</td>\n",
       "      <td>35.0</td>\n",
       "      <td>68a5590b9926689be4e10f4ae2db21a8</td>\n",
       "      <td>6030</td>\n",
       "      <td>Nagari</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>6030.0</td>\n",
       "      <td>-23.561963</td>\n",
       "      <td>-46.765487</td>\n",
       "      <td>Nagari</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80e641a11e56f04c1ad469d5645fdfde</td>\n",
       "      <td>a548910a1c6147796b98fdf73dbeba33</td>\n",
       "      <td>5</td>\n",
       "      <td>3/10/2018 0:00</td>\n",
       "      <td>3/11/2018 3:05</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>1</td>\n",
       "      <td>88.09</td>\n",
       "      <td>8a2e7ef9053dea531e4dc76bd6d853e6</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>64190b91b656ab8f37eb89b93dc84584</td>\n",
       "      <td>13380</td>\n",
       "      <td>Akhnoor</td>\n",
       "      <td>Jammu &amp; Kashmir</td>\n",
       "      <td>13380.0</td>\n",
       "      <td>-22.779754</td>\n",
       "      <td>-47.295758</td>\n",
       "      <td>Akhnoor</td>\n",
       "      <td>Jammu &amp; Kashmir</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>228ce5500dc1d8e020d8d1322874b6f0</td>\n",
       "      <td>f9e4b658b201a9f2ecdecbb34bed034b</td>\n",
       "      <td>5</td>\n",
       "      <td>2/17/2018 0:00</td>\n",
       "      <td>2/18/2018 14:36</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>1</td>\n",
       "      <td>194.12</td>\n",
       "      <td>e226dfed6544df5b7b87a48208690feb</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1d47144362c14e94ccdd213e8ec277d5</td>\n",
       "      <td>44571</td>\n",
       "      <td>Keshod</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>44571.0</td>\n",
       "      <td>-12.967482</td>\n",
       "      <td>-39.263163</td>\n",
       "      <td>Keshod</td>\n",
       "      <td>Gujarat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>e64fb393e7b32834bb789ff8bb30750e</td>\n",
       "      <td>658677c97b385a9be170737859d3511b</td>\n",
       "      <td>5</td>\n",
       "      <td>4/21/2017 0:00</td>\n",
       "      <td>4/21/2017 22:02</td>\n",
       "      <td>1</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>1</td>\n",
       "      <td>222.84</td>\n",
       "      <td>de6dff97e5f1ba84a3cd9a3bc97df5f6</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>c8cf6cb6b838dc7a33ed199b825e8616</td>\n",
       "      <td>88735</td>\n",
       "      <td>Sholingur</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>88735.0</td>\n",
       "      <td>-28.326034</td>\n",
       "      <td>-49.065664</td>\n",
       "      <td>Sholingur</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          review_id                          order_id  \\\n",
       "0  7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
       "1  7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
       "2  80e641a11e56f04c1ad469d5645fdfde  a548910a1c6147796b98fdf73dbeba33   \n",
       "3  228ce5500dc1d8e020d8d1322874b6f0  f9e4b658b201a9f2ecdecbb34bed034b   \n",
       "4  e64fb393e7b32834bb789ff8bb30750e  658677c97b385a9be170737859d3511b   \n",
       "\n",
       "   review_score review_creation_date review_answer_timestamp  \\\n",
       "0             4       1/18/2018 0:00         1/18/2018 21:46   \n",
       "1             4       1/18/2018 0:00         1/18/2018 21:46   \n",
       "2             5       3/10/2018 0:00          3/11/2018 3:05   \n",
       "3             5       2/17/2018 0:00         2/18/2018 14:36   \n",
       "4             5       4/21/2017 0:00         4/21/2017 22:02   \n",
       "\n",
       "   payment_sequential payment_type  payment_installments  payment_value  \\\n",
       "0                   1  credit_card                     8         397.26   \n",
       "1                   1  credit_card                     8         397.26   \n",
       "2                   1  credit_card                     1          88.09   \n",
       "3                   1  credit_card                     1         194.12   \n",
       "4                   1  credit_card                     1         222.84   \n",
       "\n",
       "                        customer_id  ... product_width_cm  \\\n",
       "0  41dcb106f807e993532d446263290104  ...             35.0   \n",
       "1  41dcb106f807e993532d446263290104  ...             35.0   \n",
       "2  8a2e7ef9053dea531e4dc76bd6d853e6  ...             14.0   \n",
       "3  e226dfed6544df5b7b87a48208690feb  ...             20.0   \n",
       "4  de6dff97e5f1ba84a3cd9a3bc97df5f6  ...             20.0   \n",
       "\n",
       "                 customer_unique_id customer_zip_code_prefix customer_city  \\\n",
       "0  68a5590b9926689be4e10f4ae2db21a8                     6030        Nagari   \n",
       "1  68a5590b9926689be4e10f4ae2db21a8                     6030        Nagari   \n",
       "2  64190b91b656ab8f37eb89b93dc84584                    13380       Akhnoor   \n",
       "3  1d47144362c14e94ccdd213e8ec277d5                    44571        Keshod   \n",
       "4  c8cf6cb6b838dc7a33ed199b825e8616                    88735     Sholingur   \n",
       "\n",
       "    customer_state geolocation_zip_code_prefix  geolocation_lat  \\\n",
       "0   Andhra Pradesh                      6030.0       -23.561963   \n",
       "1   Andhra Pradesh                      6030.0       -23.561963   \n",
       "2  Jammu & Kashmir                     13380.0       -22.779754   \n",
       "3          Gujarat                     44571.0       -12.967482   \n",
       "4       Tamil Nadu                     88735.0       -28.326034   \n",
       "\n",
       "  geolocation_lng geolocation_city geolocation_state  \n",
       "0      -46.765487           Nagari    Andhra Pradesh  \n",
       "1      -46.765487           Nagari    Andhra Pradesh  \n",
       "2      -47.295758          Akhnoor   Jammu & Kashmir  \n",
       "3      -39.263163           Keshod           Gujarat  \n",
       "4      -49.065664        Sholingur        Tamil Nadu  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8a0fea13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "review_id                        99172\n",
       "order_id                         99440\n",
       "review_score                         5\n",
       "review_creation_date               636\n",
       "review_answer_timestamp          89499\n",
       "payment_sequential                  29\n",
       "payment_type                         5\n",
       "payment_installments                24\n",
       "payment_value                    29077\n",
       "customer_id                      99440\n",
       "order_status                         8\n",
       "order_purchase_timestamp         88788\n",
       "order_approved_at                50461\n",
       "order_delivered_carrier_date     61543\n",
       "order_delivered_customer_date    75648\n",
       "order_estimated_delivery_date      458\n",
       "order_item_id                       21\n",
       "product_id                       32951\n",
       "seller_id                         3095\n",
       "shipping_limit_date              54614\n",
       "price                             5968\n",
       "freight_value                     6999\n",
       "seller_zip_code_prefix            2225\n",
       "seller_city                        534\n",
       "seller_state                        19\n",
       "product_category_name               71\n",
       "product_name_lenght                 66\n",
       "product_description_lenght        2960\n",
       "product_photos_qty                  19\n",
       "product_weight_g                  2204\n",
       "product_length_cm                   99\n",
       "product_height_cm                  102\n",
       "product_width_cm                    95\n",
       "customer_unique_id               96095\n",
       "customer_zip_code_prefix         14994\n",
       "customer_city                     4119\n",
       "customer_state                      20\n",
       "geolocation_zip_code_prefix      14837\n",
       "geolocation_lat                  14833\n",
       "geolocation_lng                  14834\n",
       "geolocation_city                  3797\n",
       "geolocation_state                   20\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54d9629f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop(columns=[ 'product_name_lenght','product_description_lenght','product_photos_qty', 'product_weight_g',\n",
    "        'product_length_cm', 'product_height_cm', 'product_width_cm','seller_zip_code_prefix','order_approved_at',\n",
    "        'order_delivered_carrier_date','order_estimated_delivery_date','order_delivered_customer_date','shipping_limit_date'\n",
    "        ,'payment_sequential','review_creation_date','review_answer_timestamp' ,'payment_installments'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "40a8e52b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['review_id', 'order_id', 'review_score', 'payment_type',\n",
       "       'payment_value', 'customer_id', 'order_status',\n",
       "       'order_purchase_timestamp', 'order_item_id', 'product_id', 'seller_id',\n",
       "       'price', 'freight_value', 'seller_city', 'seller_state',\n",
       "       'product_category_name', 'customer_unique_id',\n",
       "       'customer_zip_code_prefix', 'customer_city', 'customer_state',\n",
       "       'geolocation_zip_code_prefix', 'geolocation_lat', 'geolocation_lng',\n",
       "       'geolocation_city', 'geolocation_state'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d02f516e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "711"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# chacking and dropping duplicates\n",
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "55e2f8dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.drop_duplicates(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2cc29a26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# cheking the data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "747bfcf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.order_purchase_timestamp = pd.to_datetime(data['order_purchase_timestamp'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9d54b2fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 118437 entries, 0 to 119147\n",
      "Data columns (total 25 columns):\n",
      " #   Column                       Non-Null Count   Dtype         \n",
      "---  ------                       --------------   -----         \n",
      " 0   review_id                    118437 non-null  object        \n",
      " 1   order_id                     118437 non-null  object        \n",
      " 2   review_score                 118437 non-null  int64         \n",
      " 3   payment_type                 118437 non-null  object        \n",
      " 4   payment_value                118437 non-null  float64       \n",
      " 5   customer_id                  118437 non-null  object        \n",
      " 6   order_status                 118437 non-null  object        \n",
      " 7   order_purchase_timestamp     118437 non-null  datetime64[ns]\n",
      " 8   order_item_id                117623 non-null  float64       \n",
      " 9   product_id                   117623 non-null  object        \n",
      " 10  seller_id                    117623 non-null  object        \n",
      " 11  price                        117623 non-null  float64       \n",
      " 12  freight_value                117623 non-null  float64       \n",
      " 13  seller_city                  115980 non-null  object        \n",
      " 14  seller_state                 115980 non-null  object        \n",
      " 15  product_category_name        115918 non-null  object        \n",
      " 16  customer_unique_id           118437 non-null  object        \n",
      " 17  customer_zip_code_prefix     118437 non-null  int64         \n",
      " 18  customer_city                118437 non-null  object        \n",
      " 19  customer_state               118437 non-null  object        \n",
      " 20  geolocation_zip_code_prefix  118115 non-null  float64       \n",
      " 21  geolocation_lat              118115 non-null  float64       \n",
      " 22  geolocation_lng              118115 non-null  float64       \n",
      " 23  geolocation_city             118115 non-null  object        \n",
      " 24  geolocation_state            118115 non-null  object        \n",
      "dtypes: datetime64[ns](1), float64(7), int64(2), object(15)\n",
      "memory usage: 23.5+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e5a649",
   "metadata": {},
   "source": [
    "### Detailed exploratory analysis\n",
    "#### a. Define & calculate high level metrics like (Total Revenue, Total quantity, Total products, Total categories, Total sellers, Total locations, Total channels, Total payment methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "65cbddf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Revenue Generated :  20557766.619999997\n",
      "Total Quantity :  117623\n",
      "Total product :  117623\n",
      "Total categories :  71\n",
      "Total sellers :  117623\n",
      "Total locations :  14837\n",
      "Total channels and payment methods are 5\n"
     ]
    }
   ],
   "source": [
    "print(\"Total Revenue Generated : \" , data.payment_value.sum())\n",
    "print(\"Total Quantity : \" ,data.order_item_id.count() )\n",
    "print(\"Total product : \", data.product_id.count())\n",
    "print(\"Total categories : \", data.product_category_name.nunique() )\n",
    "print(\"Total sellers : \" , data.seller_id.count() )\n",
    "print(\"Total locations : \" ,data.geolocation_zip_code_prefix.nunique())\n",
    "print(\"Total channels and payment methods are\",data.payment_type.nunique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f9e6a64",
   "metadata": {},
   "source": [
    "### b. Understanding how many new customers acquired every month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "90d4d62a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"month_wise_year\"] = data['order_purchase_timestamp'].apply(lambda x : pd.Timestamp.strftime(x,format='%Y%m'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "32e5492e",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_customer_monthly=data.drop_duplicates(subset = ['customer_id'],keep = 'first').groupby(by='month_wise_year')['customer_unique_id'].nunique().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ebec4f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_wise_year</th>\n",
       "      <th>customer_unique_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>201609</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>201610</td>\n",
       "      <td>321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>201612</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>201701</td>\n",
       "      <td>765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>201702</td>\n",
       "      <td>1755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>201703</td>\n",
       "      <td>2642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>201704</td>\n",
       "      <td>2372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>201705</td>\n",
       "      <td>3625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>201706</td>\n",
       "      <td>3180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>201707</td>\n",
       "      <td>3947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>201708</td>\n",
       "      <td>4246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>201709</td>\n",
       "      <td>4212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>201710</td>\n",
       "      <td>4561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>201711</td>\n",
       "      <td>7430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>201712</td>\n",
       "      <td>5603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>201801</td>\n",
       "      <td>7166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>201802</td>\n",
       "      <td>6569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>201803</td>\n",
       "      <td>7115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>201804</td>\n",
       "      <td>6882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>201805</td>\n",
       "      <td>6814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>201806</td>\n",
       "      <td>6128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>201807</td>\n",
       "      <td>6230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>201808</td>\n",
       "      <td>6460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>201809</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>201810</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   month_wise_year  customer_unique_id\n",
       "0           201609                   3\n",
       "1           201610                 321\n",
       "2           201612                   1\n",
       "3           201701                 765\n",
       "4           201702                1755\n",
       "5           201703                2642\n",
       "6           201704                2372\n",
       "7           201705                3625\n",
       "8           201706                3180\n",
       "9           201707                3947\n",
       "10          201708                4246\n",
       "11          201709                4212\n",
       "12          201710                4561\n",
       "13          201711                7430\n",
       "14          201712                5603\n",
       "15          201801                7166\n",
       "16          201802                6569\n",
       "17          201803                7115\n",
       "18          201804                6882\n",
       "19          201805                6814\n",
       "20          201806                6128\n",
       "21          201807                6230\n",
       "22          201808                6460\n",
       "23          201809                  14\n",
       "24          201810                   4"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_customer_monthly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3663f5cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = new_customer_monthly['month_wise_year']\n",
    "y = new_customer_monthly['customer_unique_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c8d855dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig = plt.figure(figsize = (20 , 10))\n",
    "fig1 = plt.bar( x, y , color = 'green' )\n",
    "plt.xlabel(\"Months\")\n",
    "plt.ylabel(\"Total number of customers\")\n",
    "plt.title('Number of customers acquired every month ')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dccb2582",
   "metadata": {},
   "source": [
    "### c. Understand the retention of customers on month on month basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "65d84fe7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_unique_id</th>\n",
       "      <th>Year_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
       "      <td>2017-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
       "      <td>2018-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
       "      <td>2018-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
       "      <td>2018-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
       "      <td>2018-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99436</th>\n",
       "      <td>1a29b476fee25c95fbafc67c5ac95cf8</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99437</th>\n",
       "      <td>d52a67c98be1cf6a5c84435bd38d095d</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99438</th>\n",
       "      <td>e9f50caf99f032f0bf3c55141f019d99</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99439</th>\n",
       "      <td>73c2643a0a458b49f58cea58833b192e</td>\n",
       "      <td>2017-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99440</th>\n",
       "      <td>84732c5050c01db9b23e19ba39899398</td>\n",
       "      <td>2017-12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96096 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     customer_unique_id Year_month\n",
       "0      861eff4711a542e4b93843c6dd7febb0    2017-05\n",
       "1      290c77bc529b7ac935b93aa66c333dc3    2018-01\n",
       "2      060e732b5b29e8181a18229c7b0b2b5e    2018-05\n",
       "3      259dac757896d24d7702b9acbbff3f3c    2018-03\n",
       "4      345ecd01c38d18a9036ed96c73b8d066    2018-07\n",
       "...                                 ...        ...\n",
       "99436  1a29b476fee25c95fbafc67c5ac95cf8    2018-04\n",
       "99437  d52a67c98be1cf6a5c84435bd38d095d    2018-04\n",
       "99438  e9f50caf99f032f0bf3c55141f019d99    2018-04\n",
       "99439  73c2643a0a458b49f58cea58833b192e    2017-11\n",
       "99440  84732c5050c01db9b23e19ba39899398    2017-12\n",
       "\n",
       "[96096 rows x 2 columns]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders['order_purchase_timestamp'] = pd.to_datetime(orders.order_purchase_timestamp, format = '%m/%d/%Y %H:%M')\n",
    "orders['Year_month'] = orders.order_purchase_timestamp.apply(lambda x: pd.Timestamp.strftime(x , format = \"%Y-%m\"))\n",
    "#merging customers and orders data\n",
    "cust_orders = pd.merge(customer , orders , how = 'left' , on= 'customer_id')\n",
    "cust_month = cust_orders.loc[:, ['customer_unique_id', 'Year_month']] \n",
    "cust_month.drop_duplicates(subset='customer_unique_id' , inplace= True)\n",
    "cust_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "a58cea3c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_month</th>\n",
       "      <th>customer_unique_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-09</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-10</td>\n",
       "      <td>315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-02</td>\n",
       "      <td>1727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-03</td>\n",
       "      <td>2595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-04</td>\n",
       "      <td>2318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2017-05</td>\n",
       "      <td>3533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2017-06</td>\n",
       "      <td>3103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2017-07</td>\n",
       "      <td>3864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2017-08</td>\n",
       "      <td>4144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2017-09</td>\n",
       "      <td>4089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2017-10</td>\n",
       "      <td>4449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2017-11</td>\n",
       "      <td>7305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2017-12</td>\n",
       "      <td>5491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2018-01</td>\n",
       "      <td>7029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2018-02</td>\n",
       "      <td>6464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2018-03</td>\n",
       "      <td>7001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018-04</td>\n",
       "      <td>6751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2018-05</td>\n",
       "      <td>6678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2018-06</td>\n",
       "      <td>6013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2018-07</td>\n",
       "      <td>6117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018-08</td>\n",
       "      <td>6348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2018-09</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2018-10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_month  customer_unique_id\n",
       "0     2016-09                   4\n",
       "1     2016-10                 315\n",
       "2     2017-01                 749\n",
       "3     2017-02                1727\n",
       "4     2017-03                2595\n",
       "5     2017-04                2318\n",
       "6     2017-05                3533\n",
       "7     2017-06                3103\n",
       "8     2017-07                3864\n",
       "9     2017-08                4144\n",
       "10    2017-09                4089\n",
       "11    2017-10                4449\n",
       "12    2017-11                7305\n",
       "13    2017-12                5491\n",
       "14    2018-01                7029\n",
       "15    2018-02                6464\n",
       "16    2018-03                7001\n",
       "17    2018-04                6751\n",
       "18    2018-05                6678\n",
       "19    2018-06                6013\n",
       "20    2018-07                6117\n",
       "21    2018-08                6348\n",
       "22    2018-09                   8\n",
       "23    2018-10                   1"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust_monthly_cnt = cust_month.groupby('Year_month')[['customer_unique_id']].count().reset_index()\n",
    "cust_monthly_cnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "f1aed4b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_unique_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year_month</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-09</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-10</th>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01</th>\n",
       "      <td>800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02</th>\n",
       "      <td>1780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03</th>\n",
       "      <td>2682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04</th>\n",
       "      <td>2404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05</th>\n",
       "      <td>3700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-06</th>\n",
       "      <td>3245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07</th>\n",
       "      <td>4026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08</th>\n",
       "      <td>4331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09</th>\n",
       "      <td>4285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-10</th>\n",
       "      <td>4631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-11</th>\n",
       "      <td>7544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12</th>\n",
       "      <td>5673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01</th>\n",
       "      <td>7269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-02</th>\n",
       "      <td>6728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03</th>\n",
       "      <td>7211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04</th>\n",
       "      <td>6939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05</th>\n",
       "      <td>6873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06</th>\n",
       "      <td>6167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07</th>\n",
       "      <td>6292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08</th>\n",
       "      <td>6512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            customer_unique_id\n",
       "Year_month                    \n",
       "2016-09                      4\n",
       "2016-10                    324\n",
       "2016-12                      1\n",
       "2017-01                    800\n",
       "2017-02                   1780\n",
       "2017-03                   2682\n",
       "2017-04                   2404\n",
       "2017-05                   3700\n",
       "2017-06                   3245\n",
       "2017-07                   4026\n",
       "2017-08                   4331\n",
       "2017-09                   4285\n",
       "2017-10                   4631\n",
       "2017-11                   7544\n",
       "2017-12                   5673\n",
       "2018-01                   7269\n",
       "2018-02                   6728\n",
       "2018-03                   7211\n",
       "2018-04                   6939\n",
       "2018-05                   6873\n",
       "2018-06                   6167\n",
       "2018-07                   6292\n",
       "2018-08                   6512\n",
       "2018-09                     16\n",
       "2018-10                      4"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_cust_monthly = cust_orders.groupby('Year_month')[['customer_unique_id']].count()\n",
    "new_cust_monthly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "ecff0d0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_month</th>\n",
       "      <th>customer_unique_id_x</th>\n",
       "      <th>customer_unique_id_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-09</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-10</td>\n",
       "      <td>324</td>\n",
       "      <td>315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-12</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>800</td>\n",
       "      <td>749.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-02</td>\n",
       "      <td>1780</td>\n",
       "      <td>1727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-03</td>\n",
       "      <td>2682</td>\n",
       "      <td>2595.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2017-04</td>\n",
       "      <td>2404</td>\n",
       "      <td>2318.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2017-05</td>\n",
       "      <td>3700</td>\n",
       "      <td>3533.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2017-06</td>\n",
       "      <td>3245</td>\n",
       "      <td>3103.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2017-07</td>\n",
       "      <td>4026</td>\n",
       "      <td>3864.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2017-08</td>\n",
       "      <td>4331</td>\n",
       "      <td>4144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2017-09</td>\n",
       "      <td>4285</td>\n",
       "      <td>4089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2017-10</td>\n",
       "      <td>4631</td>\n",
       "      <td>4449.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2017-11</td>\n",
       "      <td>7544</td>\n",
       "      <td>7305.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2017-12</td>\n",
       "      <td>5673</td>\n",
       "      <td>5491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2018-01</td>\n",
       "      <td>7269</td>\n",
       "      <td>7029.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2018-02</td>\n",
       "      <td>6728</td>\n",
       "      <td>6464.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018-03</td>\n",
       "      <td>7211</td>\n",
       "      <td>7001.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2018-04</td>\n",
       "      <td>6939</td>\n",
       "      <td>6751.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2018-05</td>\n",
       "      <td>6873</td>\n",
       "      <td>6678.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2018-06</td>\n",
       "      <td>6167</td>\n",
       "      <td>6013.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018-07</td>\n",
       "      <td>6292</td>\n",
       "      <td>6117.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2018-08</td>\n",
       "      <td>6512</td>\n",
       "      <td>6348.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2018-09</td>\n",
       "      <td>16</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2018-10</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_month  customer_unique_id_x  customer_unique_id_y\n",
       "0     2016-09                     4                   4.0\n",
       "1     2016-10                   324                 315.0\n",
       "2     2016-12                     1                   NaN\n",
       "3     2017-01                   800                 749.0\n",
       "4     2017-02                  1780                1727.0\n",
       "5     2017-03                  2682                2595.0\n",
       "6     2017-04                  2404                2318.0\n",
       "7     2017-05                  3700                3533.0\n",
       "8     2017-06                  3245                3103.0\n",
       "9     2017-07                  4026                3864.0\n",
       "10    2017-08                  4331                4144.0\n",
       "11    2017-09                  4285                4089.0\n",
       "12    2017-10                  4631                4449.0\n",
       "13    2017-11                  7544                7305.0\n",
       "14    2017-12                  5673                5491.0\n",
       "15    2018-01                  7269                7029.0\n",
       "16    2018-02                  6728                6464.0\n",
       "17    2018-03                  7211                7001.0\n",
       "18    2018-04                  6939                6751.0\n",
       "19    2018-05                  6873                6678.0\n",
       "20    2018-06                  6167                6013.0\n",
       "21    2018-07                  6292                6117.0\n",
       "22    2018-08                  6512                6348.0\n",
       "23    2018-09                    16                   8.0\n",
       "24    2018-10                     4                   1.0"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retented_cust_monthly = pd.merge(new_cust_monthly , cust_monthly_cnt , how= 'left' , on =\"Year_month\").reset_index()\n",
    "retented_cust_monthly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "c3f30064",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_month</th>\n",
       "      <th>customer_unique_id_x</th>\n",
       "      <th>customer_unique_id_y</th>\n",
       "      <th>retented_cust</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-09</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-10</td>\n",
       "      <td>324</td>\n",
       "      <td>315.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-12</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01</td>\n",
       "      <td>800</td>\n",
       "      <td>749.0</td>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-02</td>\n",
       "      <td>1780</td>\n",
       "      <td>1727.0</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-03</td>\n",
       "      <td>2682</td>\n",
       "      <td>2595.0</td>\n",
       "      <td>87.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2017-04</td>\n",
       "      <td>2404</td>\n",
       "      <td>2318.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2017-05</td>\n",
       "      <td>3700</td>\n",
       "      <td>3533.0</td>\n",
       "      <td>167.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2017-06</td>\n",
       "      <td>3245</td>\n",
       "      <td>3103.0</td>\n",
       "      <td>142.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2017-07</td>\n",
       "      <td>4026</td>\n",
       "      <td>3864.0</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2017-08</td>\n",
       "      <td>4331</td>\n",
       "      <td>4144.0</td>\n",
       "      <td>187.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2017-09</td>\n",
       "      <td>4285</td>\n",
       "      <td>4089.0</td>\n",
       "      <td>196.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2017-10</td>\n",
       "      <td>4631</td>\n",
       "      <td>4449.0</td>\n",
       "      <td>182.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2017-11</td>\n",
       "      <td>7544</td>\n",
       "      <td>7305.0</td>\n",
       "      <td>239.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2017-12</td>\n",
       "      <td>5673</td>\n",
       "      <td>5491.0</td>\n",
       "      <td>182.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2018-01</td>\n",
       "      <td>7269</td>\n",
       "      <td>7029.0</td>\n",
       "      <td>240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2018-02</td>\n",
       "      <td>6728</td>\n",
       "      <td>6464.0</td>\n",
       "      <td>264.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018-03</td>\n",
       "      <td>7211</td>\n",
       "      <td>7001.0</td>\n",
       "      <td>210.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2018-04</td>\n",
       "      <td>6939</td>\n",
       "      <td>6751.0</td>\n",
       "      <td>188.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2018-05</td>\n",
       "      <td>6873</td>\n",
       "      <td>6678.0</td>\n",
       "      <td>195.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2018-06</td>\n",
       "      <td>6167</td>\n",
       "      <td>6013.0</td>\n",
       "      <td>154.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018-07</td>\n",
       "      <td>6292</td>\n",
       "      <td>6117.0</td>\n",
       "      <td>175.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2018-08</td>\n",
       "      <td>6512</td>\n",
       "      <td>6348.0</td>\n",
       "      <td>164.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2018-09</td>\n",
       "      <td>16</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2018-10</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_month  customer_unique_id_x  customer_unique_id_y  retented_cust\n",
       "0     2016-09                     4                   4.0            0.0\n",
       "1     2016-10                   324                 315.0            9.0\n",
       "2     2016-12                     1                   NaN            NaN\n",
       "3     2017-01                   800                 749.0           51.0\n",
       "4     2017-02                  1780                1727.0           53.0\n",
       "5     2017-03                  2682                2595.0           87.0\n",
       "6     2017-04                  2404                2318.0           86.0\n",
       "7     2017-05                  3700                3533.0          167.0\n",
       "8     2017-06                  3245                3103.0          142.0\n",
       "9     2017-07                  4026                3864.0          162.0\n",
       "10    2017-08                  4331                4144.0          187.0\n",
       "11    2017-09                  4285                4089.0          196.0\n",
       "12    2017-10                  4631                4449.0          182.0\n",
       "13    2017-11                  7544                7305.0          239.0\n",
       "14    2017-12                  5673                5491.0          182.0\n",
       "15    2018-01                  7269                7029.0          240.0\n",
       "16    2018-02                  6728                6464.0          264.0\n",
       "17    2018-03                  7211                7001.0          210.0\n",
       "18    2018-04                  6939                6751.0          188.0\n",
       "19    2018-05                  6873                6678.0          195.0\n",
       "20    2018-06                  6167                6013.0          154.0\n",
       "21    2018-07                  6292                6117.0          175.0\n",
       "22    2018-08                  6512                6348.0          164.0\n",
       "23    2018-09                    16                   8.0            8.0\n",
       "24    2018-10                     4                   1.0            3.0"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retented_cust_monthly['retented_cust'] = retented_cust_monthly.customer_unique_id_x - retented_cust_monthly.customer_unique_id_y\n",
    "retented_cust_monthly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "8258f5f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MAGICPIN\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Year_month', ylabel='retented_cust'>"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "a = retented_cust_monthly[\"Year_month\"]\n",
    "b = retented_cust_monthly['retented_cust']\n",
    "sns.barplot(a , b , data = retented_cust_monthly)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7556896d",
   "metadata": {},
   "source": [
    "### d. How the revenues from existing/new customers on month on month basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "f884e8a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_wise_year</th>\n",
       "      <th>payment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>201609</td>\n",
       "      <td>388.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>201610</td>\n",
       "      <td>76959.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>201612</td>\n",
       "      <td>19.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>201701</td>\n",
       "      <td>190366.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>201702</td>\n",
       "      <td>351230.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>201703</td>\n",
       "      <td>547556.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>201704</td>\n",
       "      <td>511767.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>201705</td>\n",
       "      <td>735983.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>201706</td>\n",
       "      <td>613152.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>201707</td>\n",
       "      <td>746440.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>201708</td>\n",
       "      <td>883152.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>201709</td>\n",
       "      <td>1028250.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>201710</td>\n",
       "      <td>1045030.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>201711</td>\n",
       "      <td>1609278.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>201712</td>\n",
       "      <td>1060215.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>201801</td>\n",
       "      <td>1423186.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>201802</td>\n",
       "      <td>1327322.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>201803</td>\n",
       "      <td>1485660.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>201804</td>\n",
       "      <td>1499457.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>201805</td>\n",
       "      <td>1510624.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>201806</td>\n",
       "      <td>1297978.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>201807</td>\n",
       "      <td>1361660.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>201808</td>\n",
       "      <td>1247055.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>201809</td>\n",
       "      <td>4439.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>201810</td>\n",
       "      <td>589.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   month_wise_year  payment_value\n",
       "0           201609         388.47\n",
       "1           201610       76959.13\n",
       "2           201612          19.62\n",
       "3           201701      190366.65\n",
       "4           201702      351230.24\n",
       "5           201703      547556.71\n",
       "6           201704      511767.50\n",
       "7           201705      735983.08\n",
       "8           201706      613152.67\n",
       "9           201707      746440.01\n",
       "10          201708      883152.91\n",
       "11          201709     1028250.28\n",
       "12          201710     1045030.83\n",
       "13          201711     1609278.22\n",
       "14          201712     1060215.53\n",
       "15          201801     1423186.34\n",
       "16          201802     1327322.09\n",
       "17          201803     1485660.09\n",
       "18          201804     1499457.60\n",
       "19          201805     1510624.12\n",
       "20          201806     1297978.62\n",
       "21          201807     1361660.87\n",
       "22          201808     1247055.83\n",
       "23          201809        4439.54\n",
       "24          201810         589.67"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = data[[\"month_wise_year\", \"payment_value\"]].groupby(\"month_wise_year\").sum().reset_index()\n",
    "p"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cec5a3f7",
   "metadata": {},
   "source": [
    "### e. Understand the trends/seasonality of sales, quantity by category, location, month,week, day, time, channel, payment method etc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e5cc06c",
   "metadata": {},
   "source": [
    "#### Total sales and quantity by category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b915fa84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Agro_Industry_And_Commerce</th>\n",
       "      <td>118712.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air_Conditioning</th>\n",
       "      <td>91170.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Art</th>\n",
       "      <td>30992.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arts_And_Craftmanship</th>\n",
       "      <td>2326.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audio</th>\n",
       "      <td>60377.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stationery</th>\n",
       "      <td>317557.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tablets_Printing_Image</th>\n",
       "      <td>10042.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telephony</th>\n",
       "      <td>486566.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toys</th>\n",
       "      <td>619507.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Watches_Gifts</th>\n",
       "      <td>1429639.26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            payment_value\n",
       "product_category_name                    \n",
       "Agro_Industry_And_Commerce      118712.21\n",
       "Air_Conditioning                 91170.66\n",
       "Art                              30992.93\n",
       "Arts_And_Craftmanship             2326.17\n",
       "Audio                            60377.04\n",
       "...                                   ...\n",
       "Stationery                      317557.11\n",
       "Tablets_Printing_Image           10042.93\n",
       "Telephony                       486566.08\n",
       "Toys                            619507.13\n",
       "Watches_Gifts                  1429639.26\n",
       "\n",
       "[71 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TOTAL SALES BY CATEGORY \n",
    "sales = data[[\"product_category_name\" ,\"payment_value\"]].groupby([\"product_category_name\"]).sum()\n",
    "sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "248c5a44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Agro_Industry_And_Commerce</th>\n",
       "      <td>249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Air_Conditioning</th>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Art</th>\n",
       "      <td>219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arts_And_Craftmanship</th>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audio</th>\n",
       "      <td>379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stationery</th>\n",
       "      <td>2595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tablets_Printing_Image</th>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telephony</th>\n",
       "      <td>4697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toys</th>\n",
       "      <td>4259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Watches_Gifts</th>\n",
       "      <td>6186</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            product_id\n",
       "product_category_name                 \n",
       "Agro_Industry_And_Commerce         249\n",
       "Air_Conditioning                   302\n",
       "Art                                219\n",
       "Arts_And_Craftmanship               24\n",
       "Audio                              379\n",
       "...                                ...\n",
       "Stationery                        2595\n",
       "Tablets_Printing_Image              87\n",
       "Telephony                         4697\n",
       "Toys                              4259\n",
       "Watches_Gifts                     6186\n",
       "\n",
       "[71 rows x 1 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TOTAL Quantity BY CATEGORY \n",
    "quantity = data[[\"product_category_name\" ,\"product_id\"]].groupby([\"product_category_name\"]).count()\n",
    "quantity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3f4c88",
   "metadata": {},
   "source": [
    "#### Total sales , quantity by location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f7f7250c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Andhra Pradesh</th>\n",
       "      <td>12260775.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arunachal Pradesh</th>\n",
       "      <td>232262.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chhattisgarh</th>\n",
       "      <td>1320393.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delhi</th>\n",
       "      <td>740639.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goa</th>\n",
       "      <td>989.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gujarat</th>\n",
       "      <td>1622304.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haryana</th>\n",
       "      <td>466476.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Himachal Pradesh</th>\n",
       "      <td>157126.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jammu &amp; Kashmir</th>\n",
       "      <td>336462.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Karnataka</th>\n",
       "      <td>807931.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kerala</th>\n",
       "      <td>313723.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Madhya Pradesh</th>\n",
       "      <td>610347.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maharashtra</th>\n",
       "      <td>432180.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orissa</th>\n",
       "      <td>129592.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Punjab</th>\n",
       "      <td>134262.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rajasthan</th>\n",
       "      <td>174293.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tamil Nadu</th>\n",
       "      <td>474263.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttar Pradesh</th>\n",
       "      <td>219017.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttaranchal</th>\n",
       "      <td>18749.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Bengal</th>\n",
       "      <td>105973.14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   payment_value\n",
       "customer_state                  \n",
       "Andhra Pradesh       12260775.04\n",
       "Arunachal Pradesh      232262.42\n",
       "Chhattisgarh          1320393.56\n",
       "Delhi                  740639.49\n",
       "Goa                       989.83\n",
       "Gujarat               1622304.61\n",
       "Haryana                466476.86\n",
       "Himachal Pradesh       157126.68\n",
       "Jammu & Kashmir        336462.68\n",
       "Karnataka              807931.83\n",
       "Kerala                 313723.38\n",
       "Madhya Pradesh         610347.66\n",
       "Maharashtra            432180.94\n",
       "Orissa                 129592.26\n",
       "Punjab                 134262.27\n",
       "Rajasthan              174293.62\n",
       "Tamil Nadu             474263.68\n",
       "Uttar Pradesh          219017.30\n",
       "Uttaranchal             18749.37\n",
       "West Bengal            105973.14"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TOTAL SALES BY Location \n",
    "sales = data[[\"customer_state\" ,\"payment_value\"]].groupby([\"customer_state\"]).sum()\n",
    "sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "60834efb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Andhra Pradesh</th>\n",
       "      <td>72306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arunachal Pradesh</th>\n",
       "      <td>1319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chhattisgarh</th>\n",
       "      <td>7390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delhi</th>\n",
       "      <td>3920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goa</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gujarat</th>\n",
       "      <td>8838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haryana</th>\n",
       "      <td>2614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Himachal Pradesh</th>\n",
       "      <td>862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jammu &amp; Kashmir</th>\n",
       "      <td>1822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Karnataka</th>\n",
       "      <td>4535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kerala</th>\n",
       "      <td>1767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Madhya Pradesh</th>\n",
       "      <td>3356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maharashtra</th>\n",
       "      <td>2320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orissa</th>\n",
       "      <td>697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Punjab</th>\n",
       "      <td>770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rajasthan</th>\n",
       "      <td>923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tamil Nadu</th>\n",
       "      <td>2458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttar Pradesh</th>\n",
       "      <td>1179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttaranchal</th>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Bengal</th>\n",
       "      <td>427</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   product_id\n",
       "customer_state               \n",
       "Andhra Pradesh          72306\n",
       "Arunachal Pradesh        1319\n",
       "Chhattisgarh             7390\n",
       "Delhi                    3920\n",
       "Goa                        10\n",
       "Gujarat                  8838\n",
       "Haryana                  2614\n",
       "Himachal Pradesh          862\n",
       "Jammu & Kashmir          1822\n",
       "Karnataka                4535\n",
       "Kerala                   1767\n",
       "Madhya Pradesh           3356\n",
       "Maharashtra              2320\n",
       "Orissa                    697\n",
       "Punjab                    770\n",
       "Rajasthan                 923\n",
       "Tamil Nadu               2458\n",
       "Uttar Pradesh            1179\n",
       "Uttaranchal               110\n",
       "West Bengal               427"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TOTAL Quantity BY location \n",
    "quantity = data[[\"customer_state\" ,\"product_id\"]].groupby([\"customer_state\"]).count()\n",
    "quantity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e62bfa",
   "metadata": {},
   "source": [
    "#### Total sales by month , week , day, time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "1732ccaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>month_wise_year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>201609</th>\n",
       "      <td>388.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201610</th>\n",
       "      <td>76959.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201612</th>\n",
       "      <td>19.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201701</th>\n",
       "      <td>190366.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201702</th>\n",
       "      <td>351230.24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 payment_value\n",
       "month_wise_year               \n",
       "201609                  388.47\n",
       "201610                76959.13\n",
       "201612                   19.62\n",
       "201701               190366.65\n",
       "201702               351230.24"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales = data[[\"month_wise_year\" ,\"payment_value\"]].groupby([\"month_wise_year\"]).sum()\n",
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "54ac5d43",
   "metadata": {},
   "outputs": [],
   "source": [
    "orders['order_purchase_timestamp'] = pd.to_datetime(orders.order_purchase_timestamp, format = '%m/%d/%Y %H:%M')\n",
    "orders['Year_month'] = orders.order_purchase_timestamp.apply(lambda x: pd.Timestamp.strftime(x , format = \"%Y-%m\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b9420278",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_unique_id</th>\n",
       "      <th>Year_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>861eff4711a542e4b93843c6dd7febb0</td>\n",
       "      <td>2017-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>290c77bc529b7ac935b93aa66c333dc3</td>\n",
       "      <td>2018-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>060e732b5b29e8181a18229c7b0b2b5e</td>\n",
       "      <td>2018-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>259dac757896d24d7702b9acbbff3f3c</td>\n",
       "      <td>2018-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>345ecd01c38d18a9036ed96c73b8d066</td>\n",
       "      <td>2018-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99436</th>\n",
       "      <td>1a29b476fee25c95fbafc67c5ac95cf8</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99437</th>\n",
       "      <td>d52a67c98be1cf6a5c84435bd38d095d</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99438</th>\n",
       "      <td>e9f50caf99f032f0bf3c55141f019d99</td>\n",
       "      <td>2018-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99439</th>\n",
       "      <td>73c2643a0a458b49f58cea58833b192e</td>\n",
       "      <td>2017-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99440</th>\n",
       "      <td>84732c5050c01db9b23e19ba39899398</td>\n",
       "      <td>2017-12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96096 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     customer_unique_id Year_month\n",
       "0      861eff4711a542e4b93843c6dd7febb0    2017-05\n",
       "1      290c77bc529b7ac935b93aa66c333dc3    2018-01\n",
       "2      060e732b5b29e8181a18229c7b0b2b5e    2018-05\n",
       "3      259dac757896d24d7702b9acbbff3f3c    2018-03\n",
       "4      345ecd01c38d18a9036ed96c73b8d066    2018-07\n",
       "...                                 ...        ...\n",
       "99436  1a29b476fee25c95fbafc67c5ac95cf8    2018-04\n",
       "99437  d52a67c98be1cf6a5c84435bd38d095d    2018-04\n",
       "99438  e9f50caf99f032f0bf3c55141f019d99    2018-04\n",
       "99439  73c2643a0a458b49f58cea58833b192e    2017-11\n",
       "99440  84732c5050c01db9b23e19ba39899398    2017-12\n",
       "\n",
       "[96096 rows x 2 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#merging customers and orders data\n",
    "cust_orders = pd.merge(customer , orders , how = 'left' , on= 'customer_id')\n",
    "cust_month = cust_orders.loc[:, ['customer_unique_id', 'Year_month']] \n",
    "cust_month.drop_duplicates(subset='customer_unique_id' , inplace= True)\n",
    "cust_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "087c866c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sales = cust_month[[\"month_wise_year\" ,\"payment_value\"]].groupby([\"month_wise_year\"]).sum()\n",
    "sales.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "915720f4",
   "metadata": {},
   "source": [
    "### f.  Popular Products by month, seller, state, category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d3f53bc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month_wise_year</th>\n",
       "      <th>product_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>31842</th>\n",
       "      <td>201801</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46883</th>\n",
       "      <td>201805</td>\n",
       "      <td>53b36df67ebb7c41585e8d54d6772e08</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22318</th>\n",
       "      <td>201711</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42621</th>\n",
       "      <td>201804</td>\n",
       "      <td>53b36df67ebb7c41585e8d54d6772e08</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8488</th>\n",
       "      <td>201706</td>\n",
       "      <td>42a2c92a0979a949ca4ea89ec5c7b934</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36607</th>\n",
       "      <td>201802</td>\n",
       "      <td>e53e557d5a159f5aa2c5e995dfdf244b</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61766</th>\n",
       "      <td>201808</td>\n",
       "      <td>e7cc48a9daff5436f63d3aad9426f28b</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7008</th>\n",
       "      <td>201705</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39869</th>\n",
       "      <td>201803</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12380</th>\n",
       "      <td>201707</td>\n",
       "      <td>f1c7f353075ce59d8a6f3cf58f419c9c</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26593</th>\n",
       "      <td>201712</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15242</th>\n",
       "      <td>201708</td>\n",
       "      <td>f1c7f353075ce59d8a6f3cf58f419c9c</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57094</th>\n",
       "      <td>201807</td>\n",
       "      <td>d285360f29ac7fd97640bf0baef03de0</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3012</th>\n",
       "      <td>201703</td>\n",
       "      <td>7e0dc102074f8285580c9777f79c90cf</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50035</th>\n",
       "      <td>201806</td>\n",
       "      <td>19c91ef95d509ea33eda93495c4d3481</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18989</th>\n",
       "      <td>201710</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4901</th>\n",
       "      <td>201704</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16138</th>\n",
       "      <td>201709</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>201701</td>\n",
       "      <td>37eb69aca8718e843d897aa7b82f462d</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1703</th>\n",
       "      <td>201702</td>\n",
       "      <td>a703f5ade6e4fae527357132230ea778</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256</th>\n",
       "      <td>201610</td>\n",
       "      <td>eba7488e1c67729f045ab43fac426f2e</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>201609</td>\n",
       "      <td>c1488892604e4ba5cff5b4eb4d595400</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>201612</td>\n",
       "      <td>f5d8f4fbc70ca2a0038b9a0010ed5cb0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62174</th>\n",
       "      <td>201809</td>\n",
       "      <td>b98992ea80b467987a7fbb88e7f2076a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      month_wise_year                        product_id  order_id\n",
       "31842          201801  aca2eb7d00ea1a7b8ebd4e68314663af       124\n",
       "46883          201805  53b36df67ebb7c41585e8d54d6772e08       115\n",
       "22318          201711  422879e10f46682990de24d770e7f83d        96\n",
       "42621          201804  53b36df67ebb7c41585e8d54d6772e08        86\n",
       "8488           201706  42a2c92a0979a949ca4ea89ec5c7b934        73\n",
       "36607          201802  e53e557d5a159f5aa2c5e995dfdf244b        72\n",
       "61766          201808  e7cc48a9daff5436f63d3aad9426f28b        70\n",
       "7008           201705  99a4788cb24856965c36a24e339b6058        66\n",
       "39869          201803  aca2eb7d00ea1a7b8ebd4e68314663af        65\n",
       "12380          201707  f1c7f353075ce59d8a6f3cf58f419c9c        63\n",
       "26593          201712  422879e10f46682990de24d770e7f83d        55\n",
       "15242          201708  f1c7f353075ce59d8a6f3cf58f419c9c        53\n",
       "57094          201807  d285360f29ac7fd97640bf0baef03de0        47\n",
       "3012           201703  7e0dc102074f8285580c9777f79c90cf        45\n",
       "50035          201806  19c91ef95d509ea33eda93495c4d3481        43\n",
       "18989          201710  422879e10f46682990de24d770e7f83d        42\n",
       "4901           201704  99a4788cb24856965c36a24e339b6058        38\n",
       "16138          201709  422879e10f46682990de24d770e7f83d        38\n",
       "412            201701  37eb69aca8718e843d897aa7b82f462d        15\n",
       "1703           201702  a703f5ade6e4fae527357132230ea778        13\n",
       "256            201610  eba7488e1c67729f045ab43fac426f2e        11\n",
       "0              201609  c1488892604e4ba5cff5b4eb4d595400         1\n",
       "277            201612  f5d8f4fbc70ca2a0038b9a0010ed5cb0         1\n",
       "62174          201809  b98992ea80b467987a7fbb88e7f2076a         1"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Popular products by Months\n",
    "pop_prod = data[[\"product_id\", \"order_id\", \"month_wise_year\"]].groupby([\"month_wise_year\",\"product_id\"]).count().reset_index()\n",
    "pop_prod = pop_prod.sort_values('order_id' ,ascending = False).drop_duplicates('month_wise_year')\n",
    "pop_prod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "75ac08fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MAGICPIN\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (20 ,8))\n",
    "a = pop_prod[\"month_wise_year\"]\n",
    "b = pop_prod['order_id']\n",
    "c = pop_prod['product_id']\n",
    "sns.barplot(a , b , hue = c)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "60ce24b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_state</th>\n",
       "      <th>product_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16353</th>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36062</th>\n",
       "      <td>Gujarat</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26503</th>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42520</th>\n",
       "      <td>Karnataka</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48024</th>\n",
       "      <td>Madhya Pradesh</td>\n",
       "      <td>d1c427060a0f73f6b889a5c7c61f2ac4</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30802</th>\n",
       "      <td>Delhi</td>\n",
       "      <td>53759a2ecddad2bb87a079a1f1519f73</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38231</th>\n",
       "      <td>Haryana</td>\n",
       "      <td>35afc973633aaeb6b877ff57b2793310</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41114</th>\n",
       "      <td>Jammu &amp; Kashmir</td>\n",
       "      <td>89b190a046022486c635022524a974a8</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49461</th>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53332</th>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>b532349fe46b38fbc7bb3914c1bdae07</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45661</th>\n",
       "      <td>Kerala</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24307</th>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>03e1c946c0ddfc58724ff262aef08dff</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50951</th>\n",
       "      <td>Punjab</td>\n",
       "      <td>60ee9861f35c13d4a3a2bc10e86bb05b</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53888</th>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>12d4987d54a76e89154609f0314b0f2f</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51536</th>\n",
       "      <td>Rajasthan</td>\n",
       "      <td>3dd2a17168ec895c781a9191c1e95ad7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50532</th>\n",
       "      <td>Orissa</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39878</th>\n",
       "      <td>Himachal Pradesh</td>\n",
       "      <td>4316b712956314302c5d0aef9ed77c13</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55074</th>\n",
       "      <td>West Bengal</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54789</th>\n",
       "      <td>Uttaranchal</td>\n",
       "      <td>53759a2ecddad2bb87a079a1f1519f73</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32589</th>\n",
       "      <td>Goa</td>\n",
       "      <td>a50acd33ba7a8da8e9db65094fa990a4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          customer_state                        product_id  order_id\n",
       "16353     Andhra Pradesh  aca2eb7d00ea1a7b8ebd4e68314663af       346\n",
       "36062            Gujarat  aca2eb7d00ea1a7b8ebd4e68314663af        50\n",
       "26503       Chhattisgarh  422879e10f46682990de24d770e7f83d        41\n",
       "42520          Karnataka  422879e10f46682990de24d770e7f83d        25\n",
       "48024     Madhya Pradesh  d1c427060a0f73f6b889a5c7c61f2ac4        25\n",
       "30802              Delhi  53759a2ecddad2bb87a079a1f1519f73        24\n",
       "38231            Haryana  35afc973633aaeb6b877ff57b2793310        15\n",
       "41114    Jammu & Kashmir  89b190a046022486c635022524a974a8        15\n",
       "49461        Maharashtra  99a4788cb24856965c36a24e339b6058        13\n",
       "53332         Tamil Nadu  b532349fe46b38fbc7bb3914c1bdae07        13\n",
       "45661             Kerala  aca2eb7d00ea1a7b8ebd4e68314663af        13\n",
       "24307  Arunachal Pradesh  03e1c946c0ddfc58724ff262aef08dff        12\n",
       "50951             Punjab  60ee9861f35c13d4a3a2bc10e86bb05b        10\n",
       "53888      Uttar Pradesh  12d4987d54a76e89154609f0314b0f2f         8\n",
       "51536          Rajasthan  3dd2a17168ec895c781a9191c1e95ad7         7\n",
       "50532             Orissa  aca2eb7d00ea1a7b8ebd4e68314663af         7\n",
       "39878   Himachal Pradesh  4316b712956314302c5d0aef9ed77c13         6\n",
       "55074        West Bengal  99a4788cb24856965c36a24e339b6058         6\n",
       "54789        Uttaranchal  53759a2ecddad2bb87a079a1f1519f73         3\n",
       "32589                Goa  a50acd33ba7a8da8e9db65094fa990a4         1"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Popular products by state\n",
    "prod_state = data[[\"product_id\", \"order_id\", \"customer_state\"]].groupby([\"customer_state\",\"product_id\"]).count().reset_index()\n",
    "prod_state = prod_state.sort_values('order_id' ,ascending = False).drop_duplicates('customer_state')\n",
    "prod_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4c2ceee2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MAGICPIN\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize = (20 ,8))\n",
    "a = prod_state[\"customer_state\"]\n",
    "b = prod_state['order_id']\n",
    "c = prod_state['product_id']\n",
    "sns.barplot(a , b , hue = c)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0e241582",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_category_name</th>\n",
       "      <th>product_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14154</th>\n",
       "      <td>Furniture_Decor</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5002</th>\n",
       "      <td>Bed_Bath_Table</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15387</th>\n",
       "      <td>Garden_Tools</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7999</th>\n",
       "      <td>Computers_Accessories</td>\n",
       "      <td>d1c427060a0f73f6b889a5c7c61f2ac4</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31448</th>\n",
       "      <td>Watches_Gifts</td>\n",
       "      <td>53b36df67ebb7c41585e8d54d6772e08</td>\n",
       "      <td>327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>Arts_And_Craftmanship</td>\n",
       "      <td>b9976e9c22fb1540bd71d1bcd2989475</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22142</th>\n",
       "      <td>Music</td>\n",
       "      <td>2848023ffcfb063bb7aa0d0c447bd116</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11650</th>\n",
       "      <td>Fashion_Childrens_Clothes</td>\n",
       "      <td>57bdf3098169cccdb62221bd3e089cbd</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21673</th>\n",
       "      <td>La_Cuisine</td>\n",
       "      <td>33900d427fa4bd3f509cdacda72e84a3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24372</th>\n",
       "      <td>Security_And_Services</td>\n",
       "      <td>6c7a0a349ad11817745e3ad58abd5c79</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           product_category_name                        product_id  order_id\n",
       "14154            Furniture_Decor  aca2eb7d00ea1a7b8ebd4e68314663af       534\n",
       "5002              Bed_Bath_Table  99a4788cb24856965c36a24e339b6058       525\n",
       "15387               Garden_Tools  422879e10f46682990de24d770e7f83d       505\n",
       "7999       Computers_Accessories  d1c427060a0f73f6b889a5c7c61f2ac4       355\n",
       "31448              Watches_Gifts  53b36df67ebb7c41585e8d54d6772e08       327\n",
       "...                          ...                               ...       ...\n",
       "267        Arts_And_Craftmanship  b9976e9c22fb1540bd71d1bcd2989475         5\n",
       "22142                      Music  2848023ffcfb063bb7aa0d0c447bd116         4\n",
       "11650  Fashion_Childrens_Clothes  57bdf3098169cccdb62221bd3e089cbd         3\n",
       "21673                 La_Cuisine  33900d427fa4bd3f509cdacda72e84a3         3\n",
       "24372      Security_And_Services  6c7a0a349ad11817745e3ad58abd5c79         1\n",
       "\n",
       "[71 rows x 3 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Popular products by Category\n",
    "pop_cat = data[[\"product_id\", \"order_id\", \"product_category_name\"]].groupby([\"product_category_name\",\"product_id\"]).count().reset_index()\n",
    "pop_cat = pop_cat.sort_values('order_id' ,ascending = False).drop_duplicates('product_category_name')\n",
    "pop_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "997c95e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seller_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21025</th>\n",
       "      <td>955fee9216a65b617aa5c0531780ce60</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9881</th>\n",
       "      <td>4a3ca9315b744ce9f8e9374361493884</td>\n",
       "      <td>99a4788cb24856965c36a24e339b6058</td>\n",
       "      <td>519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4645</th>\n",
       "      <td>1f50f920176fa81dab994f9023523100</td>\n",
       "      <td>422879e10f46682990de24d770e7f83d</td>\n",
       "      <td>505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22211</th>\n",
       "      <td>a1043bafd471dff536d0c462352beb48</td>\n",
       "      <td>d1c427060a0f73f6b889a5c7c61f2ac4</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26771</th>\n",
       "      <td>cc419e0650a3c5ba77189a1882b7556a</td>\n",
       "      <td>154e7e31ebfa092203795c972e5804a6</td>\n",
       "      <td>295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15253</th>\n",
       "      <td>70c0fda4c313d87115644d39e62eec60</td>\n",
       "      <td>41e4e4c8ab0ec1fcde0df5679749a3e4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15307</th>\n",
       "      <td>70f7e8018e3d46c748c92f026aa2585a</td>\n",
       "      <td>8141daa1ca889b50094987ed7858337e</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15411</th>\n",
       "      <td>713e3a23ca5e47786eb6f0d99f94cfac</td>\n",
       "      <td>3fcd8dfe610c62edfb51de2630cd9ef4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15396</th>\n",
       "      <td>712efd3b68f9686dc856b84abd0f21ae</td>\n",
       "      <td>4466f429e81266e99d1935267aa13329</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15019</th>\n",
       "      <td>702835e4b785b67a084280efca355756</td>\n",
       "      <td>a9c404971d1a5b1cbc2e4070e02731fd</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3095 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              seller_id                        product_id  \\\n",
       "21025  955fee9216a65b617aa5c0531780ce60  aca2eb7d00ea1a7b8ebd4e68314663af   \n",
       "9881   4a3ca9315b744ce9f8e9374361493884  99a4788cb24856965c36a24e339b6058   \n",
       "4645   1f50f920176fa81dab994f9023523100  422879e10f46682990de24d770e7f83d   \n",
       "22211  a1043bafd471dff536d0c462352beb48  d1c427060a0f73f6b889a5c7c61f2ac4   \n",
       "26771  cc419e0650a3c5ba77189a1882b7556a  154e7e31ebfa092203795c972e5804a6   \n",
       "...                                 ...                               ...   \n",
       "15253  70c0fda4c313d87115644d39e62eec60  41e4e4c8ab0ec1fcde0df5679749a3e4   \n",
       "15307  70f7e8018e3d46c748c92f026aa2585a  8141daa1ca889b50094987ed7858337e   \n",
       "15411  713e3a23ca5e47786eb6f0d99f94cfac  3fcd8dfe610c62edfb51de2630cd9ef4   \n",
       "15396  712efd3b68f9686dc856b84abd0f21ae  4466f429e81266e99d1935267aa13329   \n",
       "15019  702835e4b785b67a084280efca355756  a9c404971d1a5b1cbc2e4070e02731fd   \n",
       "\n",
       "       order_id  \n",
       "21025       534  \n",
       "9881        519  \n",
       "4645        505  \n",
       "22211       355  \n",
       "26771       295  \n",
       "...         ...  \n",
       "15253         1  \n",
       "15307         1  \n",
       "15411         1  \n",
       "15396         1  \n",
       "15019         1  \n",
       "\n",
       "[3095 rows x 3 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Popular products by Seller\n",
    "pop_prod = data[[\"product_id\", \"order_id\", \"seller_id\"]].groupby([\"seller_id\",\"product_id\"]).count().reset_index()\n",
    "pop_prod = pop_prod.sort_values('order_id' ,ascending = False).drop_duplicates('seller_id')\n",
    "pop_prod"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a253331",
   "metadata": {},
   "source": [
    "### g. Popular categories by state, month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a4aaf04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# popural categories by state\n",
    "st_mon=data[['customer_state','product_category_name','order_id']].groupby(['customer_state','product_category_name']).aggregate('count').reset_index()\n",
    "st_mon=st_mon.sort_values(['customer_state' ,'order_id'], ascending=[True, False]).drop_duplicates('customer_state')\n",
    "st_mon\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc30c93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# popular categories by month\n",
    "st_mon=data[['month_wise_year','product_category_name','order_id']].groupby(['month_wise_year','product_category_name']).aggregate('count').reset_index()\n",
    "st_mon=st_mon.sort_values(['month_wise_year' ,'order_id'], ascending=[True, False]).drop_duplicates('month_wise_year')\n",
    "st_mon"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4ed0107",
   "metadata": {},
   "source": [
    "### h. List top 10 most expensive products sorted by price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "4fd52602",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Health_Beauty</th>\n",
       "      <td>1295017.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Watches_Gifts</th>\n",
       "      <td>1251312.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bed_Bath_Table</th>\n",
       "      <td>1101963.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sports_Leisure</th>\n",
       "      <td>1024136.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Computers_Accessories</th>\n",
       "      <td>947665.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flowers</th>\n",
       "      <td>1110.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home_Comfort_2</th>\n",
       "      <td>773.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cds_Dvds_Musicals</th>\n",
       "      <td>730.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Childrens_Clothes</th>\n",
       "      <td>569.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_And_Services</th>\n",
       "      <td>283.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                price\n",
       "product_category_name                \n",
       "Health_Beauty              1295017.44\n",
       "Watches_Gifts              1251312.51\n",
       "Bed_Bath_Table             1101963.55\n",
       "Sports_Leisure             1024136.32\n",
       "Computers_Accessories       947665.59\n",
       "...                               ...\n",
       "Flowers                       1110.04\n",
       "Home_Comfort_2                 773.17\n",
       "Cds_Dvds_Musicals              730.00\n",
       "Fashion_Childrens_Clothes      569.85\n",
       "Security_And_Services          283.29\n",
       "\n",
       "[71 rows x 1 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"product_category_name\",\"price\"]].groupby('product_category_name').sum().sort_values('price' , ascending = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53e95059",
   "metadata": {},
   "source": [
    "### 2. Performing Customers/sellers Segmentation\n",
    "### a. Divide the customers into groups based on the revenue generated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "809f4422",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_unique_id</th>\n",
       "      <th>payment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0000366f3b9a7992bf8c76cfdf3221e2</td>\n",
       "      <td>141.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0000b849f77a49e4a4ce2b2a4ca5be3f</td>\n",
       "      <td>27.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0000f46a3911fa3c0805444483337064</td>\n",
       "      <td>86.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0000f6ccb0745a6a4b88665a16c9f078</td>\n",
       "      <td>43.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004aac84e0df4da2b147fca70cf8255</td>\n",
       "      <td>196.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96090</th>\n",
       "      <td>fffcf5a5ff07b0908bd4e2dbc735a684</td>\n",
       "      <td>4134.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96091</th>\n",
       "      <td>fffea47cd6d3cc0a88bd621562a9d061</td>\n",
       "      <td>84.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96092</th>\n",
       "      <td>ffff371b4d645b6ecea244b27531430a</td>\n",
       "      <td>112.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96093</th>\n",
       "      <td>ffff5962728ec6157033ef9805bacc48</td>\n",
       "      <td>133.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96094</th>\n",
       "      <td>ffffd2657e2aad2907e67c3e9daecbeb</td>\n",
       "      <td>71.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96095 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     customer_unique_id  payment_value\n",
       "0      0000366f3b9a7992bf8c76cfdf3221e2         141.90\n",
       "1      0000b849f77a49e4a4ce2b2a4ca5be3f          27.19\n",
       "2      0000f46a3911fa3c0805444483337064          86.22\n",
       "3      0000f6ccb0745a6a4b88665a16c9f078          43.62\n",
       "4      0004aac84e0df4da2b147fca70cf8255         196.89\n",
       "...                                 ...            ...\n",
       "96090  fffcf5a5ff07b0908bd4e2dbc735a684        4134.84\n",
       "96091  fffea47cd6d3cc0a88bd621562a9d061          84.58\n",
       "96092  ffff371b4d645b6ecea244b27531430a         112.46\n",
       "96093  ffff5962728ec6157033ef9805bacc48         133.69\n",
       "96094  ffffd2657e2aad2907e67c3e9daecbeb          71.56\n",
       "\n",
       "[96095 rows x 2 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr = data.groupby('customer_unique_id')[['payment_value']].sum().reset_index()\n",
    "tr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "f13b473b",
   "metadata": {},
   "outputs": [],
   "source": [
    "tr.rename(columns={'payment_value': 'total_revenue_per_customer'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "f8ec564e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# now merge the df tr and data on customer_id\n",
    "data=pd.merge(left=data,right=tr, on='customer_unique_id',how='left')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "4a338de2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "109312.64\n",
      "383.423389228046\n"
     ]
    }
   ],
   "source": [
    "# get idea of customer spend \n",
    "print(data.total_revenue_per_customer.min())\n",
    "print(data.total_revenue_per_customer.max())\n",
    "print(data.total_revenue_per_customer.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "709a9fea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>customer_segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>low budget</td>\n",
       "      <td>102067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mid budget</td>\n",
       "      <td>9028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>high budget</td>\n",
       "      <td>7340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>zero spend</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         index  customer_segment\n",
       "0   low budget            102067\n",
       "1   mid budget              9028\n",
       "2  high budget              7340\n",
       "3   zero spend                 2"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define segment of customer based on spend\n",
    "data['customer_segment']=data.total_revenue_per_customer.apply(lambda x: 'high budget' if x>1000  else 'mid budget' if  (x>=500 ) else 'low budget' if (x>=1) else 'zero spend' )\n",
    "cg=data.customer_segment.value_counts().reset_index()\n",
    "cg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "8988bcdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig=sns.barplot(data = cg, x= 'index', y='customer_segment', color='blue')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d976ddd2",
   "metadata": {},
   "source": [
    "### b. Divide the sellers into groups based on the revenue generated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "6a5f47dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['review_id', 'order_id', 'review_score', 'payment_type',\n",
       "       'payment_value', 'customer_id', 'order_status',\n",
       "       'order_purchase_timestamp', 'order_item_id', 'product_id', 'seller_id',\n",
       "       'price', 'freight_value', 'seller_city', 'seller_state',\n",
       "       'product_category_name', 'customer_unique_id',\n",
       "       'customer_zip_code_prefix', 'customer_city', 'customer_state',\n",
       "       'geolocation_zip_code_prefix', 'geolocation_lat', 'geolocation_lng',\n",
       "       'geolocation_city', 'geolocation_state', 'month_wise_year', 'week',\n",
       "       'total_revenue_per_customer_x', 'total_revenue_per_customer_y',\n",
       "       'total_revenue_per_customer', 'customer_segment'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "2e3fb008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seller_id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0015a82c2db000af6aaaf3ae2ecb0532</td>\n",
       "      <td>2685.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>001cca7ae9ae17fb1caed9dfb1094831</td>\n",
       "      <td>25248.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>001e6ad469a905060d959994f1b41e4f</td>\n",
       "      <td>250.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>002100f778ceb8431b7a1020ff7ab48f</td>\n",
       "      <td>1303.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>003554e2dce176b5555353e4f3555ac8</td>\n",
       "      <td>120.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3090</th>\n",
       "      <td>ffcfefa19b08742c5d315f2791395ee5</td>\n",
       "      <td>69.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3091</th>\n",
       "      <td>ffdd9f82b9a447f6f8d4b91554cc7dd3</td>\n",
       "      <td>2140.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3092</th>\n",
       "      <td>ffeee66ac5d5a62fe688b9d26f83f534</td>\n",
       "      <td>1839.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3093</th>\n",
       "      <td>fffd5413c0700ac820c7069d66d98c89</td>\n",
       "      <td>9360.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3094</th>\n",
       "      <td>ffff564a4f9085cd26170f4732393726</td>\n",
       "      <td>1426.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3095 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             seller_id     price\n",
       "0     0015a82c2db000af6aaaf3ae2ecb0532   2685.00\n",
       "1     001cca7ae9ae17fb1caed9dfb1094831  25248.93\n",
       "2     001e6ad469a905060d959994f1b41e4f    250.00\n",
       "3     002100f778ceb8431b7a1020ff7ab48f   1303.10\n",
       "4     003554e2dce176b5555353e4f3555ac8    120.00\n",
       "...                                ...       ...\n",
       "3090  ffcfefa19b08742c5d315f2791395ee5     69.90\n",
       "3091  ffdd9f82b9a447f6f8d4b91554cc7dd3   2140.80\n",
       "3092  ffeee66ac5d5a62fe688b9d26f83f534   1839.86\n",
       "3093  fffd5413c0700ac820c7069d66d98c89   9360.90\n",
       "3094  ffff564a4f9085cd26170f4732393726   1426.30\n",
       "\n",
       "[3095 rows x 2 columns]"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trs = data.groupby('seller_id')[['price']].sum().reset_index()\n",
    "trs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "c9e6a268",
   "metadata": {},
   "outputs": [],
   "source": [
    "trs.rename(columns = {'price' : 'revenue_generated'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "c6eae5dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# now merge the df tr and data on customer_id\n",
    "data=pd.merge(left=data,right=trs, on='seller_id',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "431faa82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.5\n",
      "237695.75\n",
      "42587.823594543246\n"
     ]
    }
   ],
   "source": [
    "# get idea of customer spend \n",
    "print(data.revenue_generated.min())\n",
    "print(data.revenue_generated.max())\n",
    "print(data.revenue_generated.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "3f716901",
   "metadata": {},
   "outputs": [],
   "source": [
    "data['seller_segment']=data.revenue_generated.apply(lambda x:  'best seller' if x>150000 else 'good seller' if (x>=50000) else 'bad seller' if (x>=20000) else 'worst seller')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "e2735772",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>seller_segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>worst seller</td>\n",
       "      <td>67932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bad seller</td>\n",
       "      <td>21870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>good seller</td>\n",
       "      <td>20825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>best seller</td>\n",
       "      <td>7810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          index  seller_segment\n",
       "0  worst seller           67932\n",
       "1    bad seller           21870\n",
       "2   good seller           20825\n",
       "3   best seller            7810"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sg=data.seller_segment.value_counts().reset_index()\n",
    "sg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "527b128f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=sns.barplot(data = cg, x= 'index', y='seller_segment', color='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65437f96",
   "metadata": {},
   "source": [
    "### 3. Cross-Selling (Which products are selling together)\n",
    "Hint: We need to find which of the top 10 combinations of products are selling together in each transaction. (combination of 2 or 3 buying together)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "60ddf123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>customer_id</th>\n",
       "      <th>order_status</th>\n",
       "      <th>order_purchase_timestamp</th>\n",
       "      <th>order_approved_at</th>\n",
       "      <th>order_delivered_carrier_date</th>\n",
       "      <th>order_delivered_customer_date</th>\n",
       "      <th>order_estimated_delivery_date</th>\n",
       "      <th>Year_month</th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>seller_id</th>\n",
       "      <th>shipping_limit_date</th>\n",
       "      <th>price</th>\n",
       "      <th>freight_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
       "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
       "      <td>delivered</td>\n",
       "      <td>2017-10-02 10:56:00</td>\n",
       "      <td>10/2/2017 11:07</td>\n",
       "      <td>10/4/2017 19:55</td>\n",
       "      <td>10/10/2017 21:25</td>\n",
       "      <td>10/18/2017 0:00</td>\n",
       "      <td>2017-10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>87285b34884572647811a353c7ac498a</td>\n",
       "      <td>3504c0cb71d7fa48d967e0e4c94d59d9</td>\n",
       "      <td>10/6/2017 11:07</td>\n",
       "      <td>29.99</td>\n",
       "      <td>8.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
       "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
       "      <td>delivered</td>\n",
       "      <td>2018-07-24 20:41:00</td>\n",
       "      <td>7/26/2018 3:24</td>\n",
       "      <td>7/26/2018 14:31</td>\n",
       "      <td>8/7/2018 15:27</td>\n",
       "      <td>8/13/2018 0:00</td>\n",
       "      <td>2018-07</td>\n",
       "      <td>1.0</td>\n",
       "      <td>595fac2a385ac33a80bd5114aec74eb8</td>\n",
       "      <td>289cdb325fb7e7f891c38608bf9e0962</td>\n",
       "      <td>7/30/2018 3:24</td>\n",
       "      <td>118.70</td>\n",
       "      <td>22.76</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           order_id                       customer_id  \\\n",
       "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
       "1  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
       "\n",
       "  order_status order_purchase_timestamp order_approved_at  \\\n",
       "0    delivered      2017-10-02 10:56:00   10/2/2017 11:07   \n",
       "1    delivered      2018-07-24 20:41:00    7/26/2018 3:24   \n",
       "\n",
       "  order_delivered_carrier_date order_delivered_customer_date  \\\n",
       "0              10/4/2017 19:55              10/10/2017 21:25   \n",
       "1              7/26/2018 14:31                8/7/2018 15:27   \n",
       "\n",
       "  order_estimated_delivery_date Year_month  order_item_id  \\\n",
       "0               10/18/2017 0:00    2017-10            1.0   \n",
       "1                8/13/2018 0:00    2018-07            1.0   \n",
       "\n",
       "                         product_id                         seller_id  \\\n",
       "0  87285b34884572647811a353c7ac498a  3504c0cb71d7fa48d967e0e4c94d59d9   \n",
       "1  595fac2a385ac33a80bd5114aec74eb8  289cdb325fb7e7f891c38608bf9e0962   \n",
       "\n",
       "  shipping_limit_date   price  freight_value  \n",
       "0     10/6/2017 11:07   29.99           8.72  \n",
       "1      7/30/2018 3:24  118.70          22.76  "
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders_order_items = pd.merge(orders , order_items , how='left' , on='order_id' )\n",
    "orders_order_items.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "54458f87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Products with same customer id and order purchase timestamp are cross selling\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>order_purchase_timestamp</th>\n",
       "      <th>product_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>08c5351a6aca1c1589a38f244edeee9d</td>\n",
       "      <td>2016-09-04 21:15:00</td>\n",
       "      <td>f293394c72c9b5fafd7023301fc21fc2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>08c5351a6aca1c1589a38f244edeee9d</td>\n",
       "      <td>2016-09-04 21:15:00</td>\n",
       "      <td>c1488892604e4ba5cff5b4eb4d595400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>a0f95ab56c6d3a5ba0036b7fdfeda07f</td>\n",
       "      <td>2016-10-04 15:02:00</td>\n",
       "      <td>79938780eb7ffb7289f59a9a283bc06b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a0f95ab56c6d3a5ba0036b7fdfeda07f</td>\n",
       "      <td>2016-10-04 15:02:00</td>\n",
       "      <td>8f1e43e0e3374ed8c84df748034d6179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>00474d2582fd72663036795b7ab8cfc1</td>\n",
       "      <td>2016-10-04 22:33:00</td>\n",
       "      <td>35bd74b6319ba18ae4f30d8b54144fd2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3566</th>\n",
       "      <td>72a366446dd3abfc90c598896714d85c</td>\n",
       "      <td>2018-08-26 11:02:00</td>\n",
       "      <td>7052c556fc966a2321d570f3c5a8790f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3567</th>\n",
       "      <td>e5a8aaccb766e00177b0a587979cc814</td>\n",
       "      <td>2018-08-26 11:44:00</td>\n",
       "      <td>df4bcf4a328103951507064660c445e9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3568</th>\n",
       "      <td>e5a8aaccb766e00177b0a587979cc814</td>\n",
       "      <td>2018-08-26 11:44:00</td>\n",
       "      <td>3af5874bd2429ed183a5445d1432fcde</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3569</th>\n",
       "      <td>c24bbeb8111fea27eab791a37e665210</td>\n",
       "      <td>2018-08-27 12:39:00</td>\n",
       "      <td>b6b220a6c539cb65be34eed6fea8fe63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3570</th>\n",
       "      <td>c24bbeb8111fea27eab791a37e665210</td>\n",
       "      <td>2018-08-27 12:39:00</td>\n",
       "      <td>8cf22b2cc9465d64474a09853b62f5b2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3571 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           customer_id order_purchase_timestamp  \\\n",
       "0     08c5351a6aca1c1589a38f244edeee9d      2016-09-04 21:15:00   \n",
       "1     08c5351a6aca1c1589a38f244edeee9d      2016-09-04 21:15:00   \n",
       "2     a0f95ab56c6d3a5ba0036b7fdfeda07f      2016-10-04 15:02:00   \n",
       "3     a0f95ab56c6d3a5ba0036b7fdfeda07f      2016-10-04 15:02:00   \n",
       "4     00474d2582fd72663036795b7ab8cfc1      2016-10-04 22:33:00   \n",
       "...                                ...                      ...   \n",
       "3566  72a366446dd3abfc90c598896714d85c      2018-08-26 11:02:00   \n",
       "3567  e5a8aaccb766e00177b0a587979cc814      2018-08-26 11:44:00   \n",
       "3568  e5a8aaccb766e00177b0a587979cc814      2018-08-26 11:44:00   \n",
       "3569  c24bbeb8111fea27eab791a37e665210      2018-08-27 12:39:00   \n",
       "3570  c24bbeb8111fea27eab791a37e665210      2018-08-27 12:39:00   \n",
       "\n",
       "                            product_id  \n",
       "0     f293394c72c9b5fafd7023301fc21fc2  \n",
       "1     c1488892604e4ba5cff5b4eb4d595400  \n",
       "2     79938780eb7ffb7289f59a9a283bc06b  \n",
       "3     8f1e43e0e3374ed8c84df748034d6179  \n",
       "4     35bd74b6319ba18ae4f30d8b54144fd2  \n",
       "...                                ...  \n",
       "3566  7052c556fc966a2321d570f3c5a8790f  \n",
       "3567  df4bcf4a328103951507064660c445e9  \n",
       "3568  3af5874bd2429ed183a5445d1432fcde  \n",
       "3569  b6b220a6c539cb65be34eed6fea8fe63  \n",
       "3570  8cf22b2cc9465d64474a09853b62f5b2  \n",
       "\n",
       "[3571 rows x 3 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_selling = orders_order_items[orders_order_items.duplicated(['order_purchase_timestamp','customer_id'],\n",
    "                                                                 keep=False)].sort_values(by='order_purchase_timestamp')\n",
    "cross_selling = cross_selling.loc[:,['customer_id','order_purchase_timestamp','product_id' ]]\n",
    "\n",
    "cross_selling.drop_duplicates(subset =\"product_id\" ,inplace=True)\n",
    "cross_selling = cross_selling[cross_selling.duplicated(['order_purchase_timestamp','customer_id'],\n",
    "                                                       keep=False)].sort_values(by='order_purchase_timestamp').reset_index()\n",
    "cross_selling.drop(columns = 'index',axis=1, inplace=True)\n",
    "\n",
    "print('Products with same customer id and order purchase timestamp are cross selling')\n",
    "cross_selling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfe356fc",
   "metadata": {},
   "source": [
    "### 4. Payment Behaviour\n",
    "### a. How customers are paying?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "ed64f837",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>payment_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>credit_card</td>\n",
       "      <td>87761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>UPI</td>\n",
       "      <td>23190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>voucher</td>\n",
       "      <td>5777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>debit_card</td>\n",
       "      <td>1706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>not_defined</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         index  payment_type\n",
       "0  credit_card         87761\n",
       "1          UPI         23190\n",
       "2      voucher          5777\n",
       "3   debit_card          1706\n",
       "4  not_defined             3"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paying = data[\"payment_type\"].value_counts().reset_index()\n",
    "paying"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "bf174c30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13,8))\n",
    "plt.pie(data=paying,x='payment_type', labels='index', autopct='%1.1f%%' )\n",
    "plt.title(\"How Customers are paying\", fontsize=22)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0561a51c",
   "metadata": {},
   "source": [
    "### b. Which payment channels are used by most customers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "209b33f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MAGICPIN\\AppData\\Local\\Temp/ipykernel_12328/3918677914.py:2: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  plt.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=sns.barplot(data=paying, x= 'index', y='payment_type', color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d595954f",
   "metadata": {},
   "source": [
    "### 5. Customer satisfaction towards category & product\n",
    "### a. Which categories (top 10) are maximum rated & minimum rated?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "cacfa490",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cds_Dvds_Musicals</th>\n",
       "      <td>4.642857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Childrens_Clothes</th>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_General_Interest</th>\n",
       "      <td>4.431858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_Imported</th>\n",
       "      <td>4.419355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_Technical</th>\n",
       "      <td>4.345588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Costruction_Tools_Tools</th>\n",
       "      <td>4.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Small_Appliances_Home_Oven_And_Coffee</th>\n",
       "      <td>4.320513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Food_Drink</th>\n",
       "      <td>4.307958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Luggage_Accessories</th>\n",
       "      <td>4.290799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Sport</th>\n",
       "      <td>4.258065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       review_score\n",
       "product_category_name                              \n",
       "Cds_Dvds_Musicals                          4.642857\n",
       "Fashion_Childrens_Clothes                  4.500000\n",
       "Books_General_Interest                     4.431858\n",
       "Books_Imported                             4.419355\n",
       "Books_Technical                            4.345588\n",
       "Costruction_Tools_Tools                    4.333333\n",
       "Small_Appliances_Home_Oven_And_Coffee      4.320513\n",
       "Food_Drink                                 4.307958\n",
       "Luggage_Accessories                        4.290799\n",
       "Fashion_Sport                              4.258065"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"product_category_name\" , \"review_score\"]].groupby(\"product_category_name\").mean().sort_values('review_score' , ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "449dcf96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Security_And_Services</th>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diapers_And_Hygiene</th>\n",
       "      <td>3.256410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home_Comfort_2</th>\n",
       "      <td>3.387097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Office_Furniture</th>\n",
       "      <td>3.508742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Male_Clothing</th>\n",
       "      <td>3.528169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fixed_Telephony</th>\n",
       "      <td>3.661765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashio_Female_Clothing</th>\n",
       "      <td>3.780000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Party_Supplies</th>\n",
       "      <td>3.795455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Furniture_Mattress_And_Upholstery</th>\n",
       "      <td>3.804878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audio</th>\n",
       "      <td>3.817942</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   review_score\n",
       "product_category_name                          \n",
       "Security_And_Services                  2.500000\n",
       "Diapers_And_Hygiene                    3.256410\n",
       "Home_Comfort_2                         3.387097\n",
       "Office_Furniture                       3.508742\n",
       "Fashion_Male_Clothing                  3.528169\n",
       "Fixed_Telephony                        3.661765\n",
       "Fashio_Female_Clothing                 3.780000\n",
       "Party_Supplies                         3.795455\n",
       "Furniture_Mattress_And_Upholstery      3.804878\n",
       "Audio                                  3.817942"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"product_category_name\" , \"review_score\"]].groupby(\"product_category_name\").mean().sort_values('review_score' , ascending = True).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ed0243a",
   "metadata": {},
   "source": [
    "### b. Which products (top10) are maximum rated & minimum rated?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6bf7d7ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00066f42aeeb9f3007548bb9d3f33c38</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86743ff92eee3d16b7df59cddd583b8c</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868ceb027ab706a4dee42e2220006b85</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868969d3a93aeeab7bfcd4fc3d3d65de</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868766ed2172644fdd977d6bd395a107</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8684bd8f93b4f4038d07188a23811e93</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867c96d2bb67aba6500a4c509cf76072</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867b820367ec206b38a357f2c12454b7</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867901d7e8488fb97f1fb538c09d476e</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865bfa00c1dad8f4146d3c2765f051ca</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  review_score\n",
       "product_id                                    \n",
       "00066f42aeeb9f3007548bb9d3f33c38           5.0\n",
       "86743ff92eee3d16b7df59cddd583b8c           5.0\n",
       "868ceb027ab706a4dee42e2220006b85           5.0\n",
       "868969d3a93aeeab7bfcd4fc3d3d65de           5.0\n",
       "868766ed2172644fdd977d6bd395a107           5.0\n",
       "8684bd8f93b4f4038d07188a23811e93           5.0\n",
       "867c96d2bb67aba6500a4c509cf76072           5.0\n",
       "867b820367ec206b38a357f2c12454b7           5.0\n",
       "867901d7e8488fb97f1fb538c09d476e           5.0\n",
       "865bfa00c1dad8f4146d3c2765f051ca           5.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"product_id\" , \"review_score\"]].groupby(\"product_id\").mean().sort_values('review_score' , ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "3caf84e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>592cc6634d2c783d297effc0b828bc37</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>482c25dc8512547962854dfff5ac057b</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e10c5041c0752194622a7a7016d8c9b5</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47fafa6908e75ae62b8a36a9eb3b9234</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47d85e3e35a3e29f93fdc12b295d520c</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47d6209a0b169cc800b0a45a9127d2f2</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47cad419b0ad5dc9d2305bf795c3c16f</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47b49b876c60eafde72f0e1c602f386d</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47b0f8596ee6dafbb4438cac16fa6275</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47ac4dcdb04867daeaad647d224389e4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  review_score\n",
       "product_id                                    \n",
       "592cc6634d2c783d297effc0b828bc37           1.0\n",
       "482c25dc8512547962854dfff5ac057b           1.0\n",
       "e10c5041c0752194622a7a7016d8c9b5           1.0\n",
       "47fafa6908e75ae62b8a36a9eb3b9234           1.0\n",
       "47d85e3e35a3e29f93fdc12b295d520c           1.0\n",
       "47d6209a0b169cc800b0a45a9127d2f2           1.0\n",
       "47cad419b0ad5dc9d2305bf795c3c16f           1.0\n",
       "47b49b876c60eafde72f0e1c602f386d           1.0\n",
       "47b0f8596ee6dafbb4438cac16fa6275           1.0\n",
       "47ac4dcdb04867daeaad647d224389e4           1.0"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[[\"product_id\" , \"review_score\"]].groupby(\"product_id\").mean().sort_values('review_score' , ascending = True).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1361c7b",
   "metadata": {},
   "source": [
    "### c. Average rating by location, seller, product, category, month etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "df93cbe7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_state</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Goa</th>\n",
       "      <td>4.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Punjab</th>\n",
       "      <td>4.149871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttar Pradesh</th>\n",
       "      <td>4.118787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tamil Nadu</th>\n",
       "      <td>4.099110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rajasthan</th>\n",
       "      <td>4.091793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haryana</th>\n",
       "      <td>4.085757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Orissa</th>\n",
       "      <td>4.084286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maharashtra</th>\n",
       "      <td>4.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kerala</th>\n",
       "      <td>4.030320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gujarat</th>\n",
       "      <td>4.023946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delhi</th>\n",
       "      <td>4.018500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chhattisgarh</th>\n",
       "      <td>4.015845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arunachal Pradesh</th>\n",
       "      <td>4.008289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jammu &amp; Kashmir</th>\n",
       "      <td>3.998907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Karnataka</th>\n",
       "      <td>3.996059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Bengal</th>\n",
       "      <td>3.988399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andhra Pradesh</th>\n",
       "      <td>3.979325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Himachal Pradesh</th>\n",
       "      <td>3.974713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Madhya Pradesh</th>\n",
       "      <td>3.974011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Uttaranchal</th>\n",
       "      <td>3.718182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   review_score\n",
       "customer_state                 \n",
       "Goa                    4.800000\n",
       "Punjab                 4.149871\n",
       "Uttar Pradesh          4.118787\n",
       "Tamil Nadu             4.099110\n",
       "Rajasthan              4.091793\n",
       "Haryana                4.085757\n",
       "Orissa                 4.084286\n",
       "Maharashtra            4.071429\n",
       "Kerala                 4.030320\n",
       "Gujarat                4.023946\n",
       "Delhi                  4.018500\n",
       "Chhattisgarh           4.015845\n",
       "Arunachal Pradesh      4.008289\n",
       "Jammu & Kashmir        3.998907\n",
       "Karnataka              3.996059\n",
       "West Bengal            3.988399\n",
       "Andhra Pradesh         3.979325\n",
       "Himachal Pradesh       3.974713\n",
       "Madhya Pradesh         3.974011\n",
       "Uttaranchal            3.718182"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average rating by location \n",
    "data[[\"customer_state\" , \"review_score\"]].groupby(\"customer_state\").mean().sort_values('review_score' , ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3aa5f41c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seller_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>c18309219e789960add0b2255ca4b091</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9c1c0c36cd23c20897e473901a8fb149</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>544863df86ed3b78a04e0820d41430ee</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247587846358bb1d2e4c6522020b36fe</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9d69ba0a7a626a64dc5db08e529559cf</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f524ad65d7e0f1daab730ef2d2e86196</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749e7cdabbaf72f16677859e27874ba5</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f5403d3f50089112c4eed37928b7f622</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dadc51ef321949ec9a3ab25cd902e23d</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61c36f0fc4a47f9532e5512b66668e62</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3095 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  review_score\n",
       "seller_id                                     \n",
       "c18309219e789960add0b2255ca4b091           5.0\n",
       "9c1c0c36cd23c20897e473901a8fb149           5.0\n",
       "544863df86ed3b78a04e0820d41430ee           5.0\n",
       "247587846358bb1d2e4c6522020b36fe           5.0\n",
       "9d69ba0a7a626a64dc5db08e529559cf           5.0\n",
       "...                                        ...\n",
       "f524ad65d7e0f1daab730ef2d2e86196           1.0\n",
       "749e7cdabbaf72f16677859e27874ba5           1.0\n",
       "f5403d3f50089112c4eed37928b7f622           1.0\n",
       "dadc51ef321949ec9a3ab25cd902e23d           1.0\n",
       "61c36f0fc4a47f9532e5512b66668e62           1.0\n",
       "\n",
       "[3095 rows x 1 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average rating by Seller \n",
    "data[[\"seller_id\" , \"review_score\"]].groupby(\"seller_id\").mean().sort_values('review_score' , ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "4bd217d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>00066f42aeeb9f3007548bb9d3f33c38</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86743ff92eee3d16b7df59cddd583b8c</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868ceb027ab706a4dee42e2220006b85</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868969d3a93aeeab7bfcd4fc3d3d65de</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868766ed2172644fdd977d6bd395a107</th>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8f73613d06e3a557da0249015cbae6b6</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d69b7880f262ed14de5f8149d2f0931d</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ba4f075aeb56726d1cf52b7ca557ca70</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8f7a3322e1abfed89ac080b0f7364779</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d21bf4652c855ccafcf94116891cc7ce</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32951 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  review_score\n",
       "product_id                                    \n",
       "00066f42aeeb9f3007548bb9d3f33c38           5.0\n",
       "86743ff92eee3d16b7df59cddd583b8c           5.0\n",
       "868ceb027ab706a4dee42e2220006b85           5.0\n",
       "868969d3a93aeeab7bfcd4fc3d3d65de           5.0\n",
       "868766ed2172644fdd977d6bd395a107           5.0\n",
       "...                                        ...\n",
       "8f73613d06e3a557da0249015cbae6b6           1.0\n",
       "d69b7880f262ed14de5f8149d2f0931d           1.0\n",
       "ba4f075aeb56726d1cf52b7ca557ca70           1.0\n",
       "8f7a3322e1abfed89ac080b0f7364779           1.0\n",
       "d21bf4652c855ccafcf94116891cc7ce           1.0\n",
       "\n",
       "[32951 rows x 1 columns]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average rating by Product \n",
    "data[[\"product_id\" , \"review_score\"]].groupby(\"product_id\").mean().sort_values('review_score' , ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "0fa2d632",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cds_Dvds_Musicals</th>\n",
       "      <td>4.642857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Childrens_Clothes</th>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_General_Interest</th>\n",
       "      <td>4.431858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_Imported</th>\n",
       "      <td>4.419355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Books_Technical</th>\n",
       "      <td>4.345588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fashion_Male_Clothing</th>\n",
       "      <td>3.528169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Office_Furniture</th>\n",
       "      <td>3.508742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Home_Comfort_2</th>\n",
       "      <td>3.387097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diapers_And_Hygiene</th>\n",
       "      <td>3.256410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Security_And_Services</th>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>71 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           review_score\n",
       "product_category_name                  \n",
       "Cds_Dvds_Musicals              4.642857\n",
       "Fashion_Childrens_Clothes      4.500000\n",
       "Books_General_Interest         4.431858\n",
       "Books_Imported                 4.419355\n",
       "Books_Technical                4.345588\n",
       "...                                 ...\n",
       "Fashion_Male_Clothing          3.528169\n",
       "Office_Furniture               3.508742\n",
       "Home_Comfort_2                 3.387097\n",
       "Diapers_And_Hygiene            3.256410\n",
       "Security_And_Services          2.500000\n",
       "\n",
       "[71 rows x 1 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average rating by Category \n",
    "data[[\"product_category_name\" , \"review_score\"]].groupby(\"product_category_name\").mean().sort_values('review_score' , ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "57496c5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>month_wise_year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>201612</th>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201807</th>\n",
       "      <td>4.200354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201808</th>\n",
       "      <td>4.189878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201708</th>\n",
       "      <td>4.180403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201806</th>\n",
       "      <td>4.173108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201805</th>\n",
       "      <td>4.109865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201709</th>\n",
       "      <td>4.102140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201706</th>\n",
       "      <td>4.101408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201705</th>\n",
       "      <td>4.096231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201707</th>\n",
       "      <td>4.081608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201701</th>\n",
       "      <td>4.063107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201804</th>\n",
       "      <td>4.061886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201703</th>\n",
       "      <td>4.018909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201710</th>\n",
       "      <td>4.009541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201702</th>\n",
       "      <td>3.980495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201704</th>\n",
       "      <td>3.956659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201712</th>\n",
       "      <td>3.914592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201801</th>\n",
       "      <td>3.911519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201711</th>\n",
       "      <td>3.804093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201802</th>\n",
       "      <td>3.716953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201803</th>\n",
       "      <td>3.676152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201610</th>\n",
       "      <td>3.491272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201810</th>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201809</th>\n",
       "      <td>1.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201609</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 review_score\n",
       "month_wise_year              \n",
       "201612               5.000000\n",
       "201807               4.200354\n",
       "201808               4.189878\n",
       "201708               4.180403\n",
       "201806               4.173108\n",
       "201805               4.109865\n",
       "201709               4.102140\n",
       "201706               4.101408\n",
       "201705               4.096231\n",
       "201707               4.081608\n",
       "201701               4.063107\n",
       "201804               4.061886\n",
       "201703               4.018909\n",
       "201710               4.009541\n",
       "201702               3.980495\n",
       "201704               3.956659\n",
       "201712               3.914592\n",
       "201801               3.911519\n",
       "201711               3.804093\n",
       "201802               3.716953\n",
       "201803               3.676152\n",
       "201610               3.491272\n",
       "201810               2.250000\n",
       "201809               1.750000\n",
       "201609               1.000000"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average rating by Month \n",
    "data[[\"month_wise_year\" , \"review_score\"]].groupby(\"month_wise_year\").mean().sort_values('review_score' , ascending = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
